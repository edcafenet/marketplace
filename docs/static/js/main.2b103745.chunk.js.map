{"version":3,"sources":["components/Navbar.js","components/Splash.js","components/FileUploader.js","components/Modal.js","components/App.js","components/MerkleViz.js","components/Main.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","target","rel","id","this","props","account","Component","Splash","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","class","xmlns","lang","http-equiv","content","name","type","src","window","location","alt","width","onClick","turnOffSplash","FileUploader","hiddenFileInput","React","useRef","Fragment","event","current","click","ref","onChange","fileUploaded","files","handleInputFile","style","display","Modal","_ref","handleClose","show","children","showHideClassName","float","paddingRight","margin","defaultStyles","jsonObjectVideoURLs","MerkleTree","require","SHA256","json_url","CenteredTree","_this","state","translate","x","outerWidth","y","outerHeight","service_id","json_data","undefined","tree","json_tree","tree_string","treeUtil","parseJSON","then","setState","catch","err","console","error","_this2","results","tasks","results_str","i","length","action","sensor","toString","height","tc","treeContainer","Main","InputTasks","InputRoot","InputFileLoaded","ShowModalArray","isActive","EtherScanUrlArray","bind","assertThisInitialized","jsonObject","JSON","parse","result","root","inputFile","reader","FileReader","readAsText","onload","onReaderLoad","index","tmp","onSubmit","preventDefault","serviceName","value","price","web3","utils","toWei","servicePrice","time","serviceTime","createService","input","placeholder","required","scope","services","map","service","key","fromWei","timeInMinutes","owner","purchased","purchaseService","removeService","components_Modal","MerkleViz","components_FileUploader","assign","request","url","App","serviceCount","loading","splash","turnOnSplash","response","body","statusCode","loadWeb3","loadBlockchainData","ethereum","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkid","networkData","Marketplace","networks","marketplace","Contract","abi","address","methods","concat","toConsumableArray","send","from","on","receipt","reload","data","_this3","_this4","videoURLs","push","components_Splash","components_Navbar","role","components_Main","lib_default","playing","controls","Boolean","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2b103745.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Navbar extends Component {\n\n  render(){\n    return (\n    <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n      <a\n        className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n        href=\"https://twitter.com/iridia_ulb\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\">\n        IRIDIA Swarm Marketplace\n      </a>\n\n    <ul className=\"navbar-nav px-3\">\n      <li className=\"nav-item text-nowrap d-none d-none d-sm-none d-sm-block\">\n        <small className=\"text-white\"><span id=\"account\">{this.props.account}</span></small>\n      </li>\n    </ul>\n    </nav>\n  );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from 'react';\n\nclass Splash extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render(){\n    return (\n\n      <div id=\"container\">\n          <div id=\"left\" class=\"contentcontainer\">\n\n          <html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\">\n          <head>\n          <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" />\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n          <title>IRIDIA Swarm Marketplace</title>\n          <meta name=\"generator\" content=\"Org mode\" />\n          <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML\"></script>\n          </head>\n          <body>\n          <div id=\"content\">\n          <div id=\"outline-container-org7432ca199\" class=\"outline-2\">\n          <h1 id=\"org7432ca9\"><span class=\"section-number-2\"></span> Quick Setup </h1>\n          <div class=\"outline-text-2\" id=\"text-1\">\n          <p>\n              <ol class=\"org-ol\">\n              <li>Install the <a target=\"_blank\"href=\"https://metamask.io\"> Metamask</a> addon for your browser</li>\n              <li>Activate your Metamask wallet</li>\n              <li>Make sure you are connected to the <i>Rinkeby Test Network</i></li>\n              <li>Enter the marketplace by clicking on the button at the top right side of the site</li>\n              </ol>\n          </p>\n          </div>\n          </div>\n          &nbsp;\n\n          <div id=\"outline-container-org7432ca9\" class=\"outline-2\">\n          <h1 id=\"org7432ca9\"><span class=\"section-number-2\"></span> Abstract</h1>\n          <div class=\"outline-text-2\" id=\"text-1\">\n          <p>\n          <b>IRIDIA<sup><a id=\"fnr.1\" class=\"footref\" href=\"#fn.1\">1</a></sup> Swarm Marketplace</b>: a web-based service marketplace\n          for swarm robotics whose logic is coded in a smart-contract and\n          uploaded in the Ethereum blockchain. In the proposed app, staff from\n          IRIDIA advertises the robotics services available at the lab (number\n          of robots, duration of service, and price). Then, customers are able\n          to purchase these services and pay with their own\n          crypto-wallets. Customers can upload a Merkle tree (MT) with the\n          list of sequential tasks the robots need to complete. Once the service is\n          completed, customers get the cryptographic proof that the robots\n          completed all the tasks included in the MT, which allows them to trust\n          the system and understand the service was not faked. Finally,\n          customers get pictures and video footage of the final work the robots\n          conducted. Videos are automatically uploaded by the system to the\n          public IRIDIA Youtube playlist<sup><a id=\"fnr.2\" class=\"footref\" href=\"#fn.2\">2</a></sup>.\n          </p>\n          </div>\n          </div>\n          &nbsp;\n          <div id=\"outline-container-orgae74a3c\" class=\"outline-2\">\n          <h1 id=\"orgae74a3c\"><span class=\"section-number-2\"></span> Introduction</h1>\n          <div class=\"outline-text-2\" id=\"text-2\">\n\n          <div id=\"orga2657c9\" class=\"figure\">\n          <p><img src={window.location.href + \"splash/Marketplace.png\"} alt=\"Marketplace.png\" width=\"1000px\" /></p>\n          <p><span class=\"figure-number\">Figure 1: </span>Information flow for the proposed application where: (1) IRIDIA staff adds services to the smart-contract by using this web interface. (2) Customers can purchase available services (i.e., a certain number of robots, for a time, for a price) by providing a valid MT as input and paying the price listed in cryptocurrency (i.e., Ethers). (3) Then, the smart-contract sends the MT to the robot swarm and the mission starts. (4) When the job is finished, the resultant hashes that prove that the robots did the job requested are sent to the smart-contract and displayed in the results section of the web interface. (5) The smart-contract publishes multimedia material of the job done by the robots in a public site where the customer can retrieve it.</p>\n          </div>\n\n          <p>\n          Fig. 1 shows the general framework and\n          main components of the IRIDIA Swarm Marketplace: a web-based\n          marketplace for swarm robotics services built on blockchain\n          technology. Let’s consider an example of how this marketplace could be used. In\n          the planning of research activities there are periods of time in which\n          IRIDIA’s robot swarm remains idle. When this happens, the IRIDIA staff\n          members taking care of the robot swarm allocation to the different\n          research activities will broadcast the robot swarm availability\n          through a market-based website. In this website, IRIDIA staff can log\n          into the platform by using lab-controlled Ethereum accounts and the\n          <a target=\"_blank\"href=\"https://metamask.io\"> Metamask</a> interface (a popular Ethereum wallet that allows your browser\n          to connect to the Ethereum blockchain). Then, a new service can be\n          added where the number of robots available, the amount of time they\n          are available for, and the price charged for their use are\n          indicated. Once the service is broadcast, potential customers\n          interested in using the robot swarm can purchase the service and\n          upload a Merkle Tree (MT) with the encoded set of tasks they need to\n          robots to complete.\n          </p>\n\n          <p>\n          After the received MT is validated, the smart-contract implementing\n          the swarm marketplace sends the information to the robots so that they\n          can start working. Robots complete the set of tasks the same way it\n          was described in the real-robot experiments of <a target=\"_blank\"href=\"https://arxiv.org/abs/1904.09266\"><i>Secure and secret\n          cooperation in robot swarms</i></a>. In our initial demonstration example, we\n          provide customers with robots that have the maze-formation set of\n          actions so that, when they upload their MTs, they can choose which\n          kind of pattern to create. Once the mission described in the uploaded\n          MT is completed by the robots, the complete set of proofs with their\n          corresponding (h<sub>a</sub>, h<sub>s</sub>) values is sent to the smart-contract and\n          stored there. Finally, customers can make sure their job has been\n          completed by the robots since the values that were used as inputs for\n          the MT have been discovered by the robots. Finally, multimedia material of the robots performing the mission is uploaded to the\n          IRIDIA Youtube playlist and available for the customer.\n          </p>\n          </div>\n          </div>\n\n          &nbsp;\n          <div id=\"outline-container-orgab854da\" class=\"outline-2\">\n          <h1 id=\"orgab854da\"><span class=\"section-number-2\"></span> Setup</h1>\n          <div class=\"outline-text-2\" id=\"text-3\">\n          </div>\n          <div id=\"outline-container-org5bc34ad\" class=\"outline-3\">\n          <h3 id=\"org5bc34ad\"><span class=\"section-number-3\"></span> Metamask</h3>\n          <div class=\"outline-text-3\" id=\"text-3-1\">\n          <p>\n          In order to access the marketplace, first, you will need a wallet\n          that can provide you an Ethereum account. <a target=\"_blank\"href=\"https://metamask.io/\">Metamask</a> provides a\n          wallet and a gateway to the Ethereum blockchain ecosystem. Please\n          make sure that you have this plugin installed in your browser\n          before accesing the marketplace.\n          </p>\n          </div>\n          </div>\n\n          <div id=\"outline-container-org6d8454c\" class=\"outline-3\">\n          <h3 id=\"org6d8454c\"><span class=\"section-number-3\"></span> Rinkeby test network</h3>\n          <div class=\"outline-text-3\" id=\"text-3-2\">\n          <p>\n          After Metamask is installed, you need to make sure you are connected to the <i>Rinkeby Test Network</i>. This is the network where the smart-contract that\n          controls the marketplace is located. A picture showing\n          where this option is located can be found below:\n          </p>\n\n          <div id=\"org8e446c2\" class=\"figure\" >\n          <img src={window.location.href + \"splash/Rinkeby.png\"} alt=\"Rinkeby.png\" width=\"500px\"/>\n          <p><span class=\"figure-number\">Figure 2: </span>Metamask dialog where the Rinkeby Test Network can be selected</p>\n          </div>\n\n          </div>\n          </div>\n          </div>\n\n          &nbsp;\n          <div id=\"outline-container-org49effd1\" class=\"outline-2\">\n          <h1 id=\"org49effd1\"><span class=\"section-number-2\"></span> Web interface</h1>\n          <div class=\"outline-text-2\" id=\"text-4\">\n          </div>\n          <div id=\"outline-container-org8ad6ece\" class=\"outline-3\">\n          <h3 id=\"org8ad6ece\"><span class=\"section-number-3\"></span> Add service</h3>\n          <div class=\"outline-text-3\" id=\"text-4-1\">\n          <p>\n          In case you connect to the marketplace as an IRIDIA staff member,\n          you will have control over one of our institutional accounts. Then,\n          the app will display the following dialog:\n          </p>\n\n\n          <div id=\"orga60dffa\" class=\"figure\">\n          <p><img src={window.location.href + \"splash/AddService.png\"} alt=\"AddService.png\" width=\"1000px\" />\n          </p>\n          <p><span class=\"figure-number\">Figure 3: </span>Add Service dialog</p>\n          </div>\n\n          <p>\n          By using this dialog, you will be able to advertise a swarm service\n          to potential customers. As depicted in Fig. 3, first,\n          you will add the number of available robots, then the time they\n          will be working for that particular service and finally the price\n          (in Ethers) you want to charge for the service.\n          </p>\n          </div>\n          </div>\n\n          <div id=\"outline-container-org167dd84\" class=\"outline-3\">\n          <div id=\"outline-container-orga8dbb54\" class=\"outline-4\">\n          <h3 id=\"orga8dbb54\"><span class=\"section-number-4\"></span> Upload an MT</h3>\n          <div class=\"outline-text-4\" id=\"text-4-2-1\">\n\n          <div id=\"org6b937a8\" class=\"figure\">\n          <p><img src={window.location.href + \"splash/UploadMT.png\"} alt=\"UploadMT.png\" width=\"1000px\" />\n          </p>\n          <p><span class=\"figure-number\">Figure 4: </span>Upload an MT button dialog</p>\n          </div>\n\n          <p>\n          In case you connect to the marketplace as a customer and there is\n          an available service that you can purchase, the interface will\n          show you an &ldquo;Upload&rdquo; button. In case you click on this button, the\n          system will ask you to upload an MT with the desired encoded set of tasks. This file must be in json format. An example of how to format this file can be found <a target=\"_blank\" href={window.location.href + \"examples/maze_bc.json\"}>here</a>.\n          </p>\n          </div>\n          </div>\n\n          <div id=\"outline-container-orge311b6d\" class=\"outline-4\">\n          <h3 id=\"orge311b6d\"><span class=\"section-number-4\"></span> Payment</h3>\n          <div class=\"outline-text-4\" id=\"text-4-2-2\">\n          <p>\n          Once the input MT is uploaded and validated, you will be able to\n          buy the service. Metamask will parse the service&rsquo;s price and will\n          create a new transaction with your account as origin and with the\n          smart-contract&rsquo;s address as destination. Once the payment is\n          completed and the transaction is confirmed, the ownership of the\n          service will be transferred to your account. Then,\n          robots will start working.\n          </p>\n          </div>\n          </div>\n\n          <div id=\"outline-container-orgeb23922\" class=\"outline-4\">\n          <h3 id=\"orgeb23922\"><span class=\"section-number-4\"></span> Results</h3>\n          <div class=\"outline-text-4\" id=\"text-4-2-3\">\n\n          <div id=\"org84042e3\" class=\"figure\">\n          <p><img src={window.location.href + \"splash/ResultsMT.png\"} alt=\"ResultsMT.png\" width=\"1000px\" />\n          </p>\n          <p><span class=\"figure-number\">Figure 5: </span>Results dialog. The original MT is displayed together with the new data (i.e., results) provided by the robots</p>\n          </div>\n\n          <p>\n          In case the service was completed successfully, robots will have\n          all the information to compute the hashes of the MT leaf nodes you\n          provided when you purchased the service. In order to confirm that\n          the service has been completed successfully, and the work done by\n          the robots was not forged or faked, the swarm will publish the\n          received MT together with the data (i.e., results) needed to compute its leaves\n          (i.e., tasks). In this situation, the marketplace will\n          show a &ldquo;Results&rdquo; button where this information is displayed. An\n          example of this dialog can is depicted in Fig. 5.\n          </p>\n          </div>\n          </div>\n          </div>\n\n          <div id=\"outline-container-orgea7afd0\" class=\"outline-3\">\n          <h1 id=\"orgea7afd0\"><span class=\"section-number-3\"></span> Multimedia material</h1>\n          <div class=\"outline-text-3\" id=\"text-4-3\">\n          <p>\n          For every completed service a new video is automatically uploaded\n          to the IRIDIA&rsquo;s Swarm Marketplace Youtube playlist<sup><a id=\"fnr.2.100\" class=\"footref\" href=\"#fn.2\">2</a></sup> together with a snapshot picture of the swarm when the service is\n          completed. This web interface will show an updated playlist of these\n          videos with their correspondent IDs.\n          </p>\n\n          <p>\n          Finally, the customer can use this multimedia material for whatever\n          he/she might need. A good example is service number 3. The customer of this service uploaded an MT that\n          encoded his Github <a target=\"_blank\" href=\"https://github.blog/2013-08-14-identicons/\">identicon</a>. After the service was completed by the robots and\n          the multimedia material was generated, the customer used the\n          snapshot picture as <a target=\"_blank\" href=\"https://github.com/edcafenet/\">his Github profile picture</a>.\n          </p>\n          </div>\n          </div>\n          </div>\n          <div id=\"footnotes\">\n          <h2 class=\"footnotes\">Footnotes: </h2>\n          <div id=\"text-footnotes\">\n\n          <div class=\"footdef\"><sup><a id=\"fn.1\" class=\"footnum\" href=\"#fnr.1\">1</a></sup> <div class=\"footpara\"><p class=\"footpara\">\n          IRIDIA is the name of the artificial intelligence lab of\n          the Université Libre de Bruxelles, where the real-robot\n          experiments presented in this app are taking place.\n          </p></div></div>\n\n          <div class=\"footdef\"><sup><a id=\"fn.2\" class=\"footnum\" href=\"#fnr.2\">2</a></sup> <div class=\"footpara\"><p class=\"footpara\">\n          <a target=\"_blank\"href=\"https://youtube.com/playlist?list=PLzpeKcW5WQlw-2MeehPr7ouIhpMI_x2N9\">https://youtube.com/playlist?list=PLzpeKcW5WQlw-2MeehPr7ouIhpMI_x2N9</a>\n          </p></div></div>\n\n          </div>\n          </div></div>\n          <div id=\"postamble\" class=\"status\">\n          </div>\n          </body>\n          </html>\n\n          </div>\n          <div id=\"right\" class=\"buttoncontainer\">\n              <button class=\"btn btn-primary btn-lg\" onClick={this.props.turnOffSplash}>\n              Enter marketplace\n              </button>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default Splash;\n","import React, { Component } from 'react';\nconst FileUploader = props => {\n\nconst hiddenFileInput = React.useRef(null);\n\n  const handleClick = event => {\n    hiddenFileInput.current.click();\n  };\n  const handleChange = event => {\n    const fileUploaded = event.target.files[0];\n    props.handleInputFile(fileUploaded);\n  };\n  return (\n    <>\n      <button className=\"btn btn-primary\" onClick={handleClick}>\n        Upload\n      </button>\n      <input type=\"file\"\n             ref={hiddenFileInput}\n             onChange={handleChange}\n             style={{display:'none'}}\n      />\n    </>\n  );\n};\n\nexport default FileUploader;\n","import React, { Component } from 'react';\n\nconst Modal = ({ handleClose, show, children }) => {\n  const showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\n  return (\n    <div className={showHideClassName}>\n      <section className=\"modal-main\">\n        <button className=\"btn btn-primary\" style={{float : 'right', paddingRight : '10px', margin: '10px 10px 10px 0', display:'inline-block'}} onClick={handleClose}>Close</button>\n        {children}\n      </section>\n    </div>\n  );\n};\n\nModal.defaultStyles = {}\n\nexport default Modal;\n","import React, { Component } from 'react';\nimport Web3 from 'web3'\nimport './App.css';\nimport Marketplace from '../abis/Marketplace.json'\nimport Navbar from './Navbar.js'\nimport Splash from './Splash.js'\nimport Main from './Main.js'\nimport ReactPlayer from 'react-player'\n\nconst request = require('request');\nvar url = window.location.href + '/media.json';\nvar jsonObjectVideoURLs;\n\nclass App extends Component {\n\ncomponentDidMount() {\n  }\n\nturnOnSplash() {\n      this.setState({splash: true})\n  }\n\nturnOffSplash() {\n      this.setState({splash: false})\n  }\n\n  async componentWillMount(){\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3(){\n        // Modern dapp browsers...\n        if (window.ethereum) {\n            window.web3 = new Web3(window.ethereum);\n            await window.ethereum.enable();\n        }\n        else if (window.web3) {\n            window.web3 = new Web3(window.web3.currentProvider);\n        }\n        else {\n            window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n        }\n  }\n\n  async loadBlockchainData(){\n    // Get object\n    const web3 = window.web3\n\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({account: accounts[0]})\n    const networkid = await web3.eth.net.getId()\n    const networkData = Marketplace.networks[networkid]\n    if (networkData){\n      const marketplace = web3.eth.Contract(Marketplace.abi, networkData.address)\n      this.setState({marketplace})\n      const serviceCount = await marketplace.methods.serviceCount().call()\n      this.setState({serviceCount})\n      // Load services\n      for (var i =1; i<=serviceCount-1; i++){\n        const service = await marketplace.methods.services(i).call()\n        this.setState({\n          services: [...this.state.services, service]\n        })\n      }\n      this.setState({loading:false})\n    }\n    else {\n        window.alert('Marketplace contract not deployed to detected network');\n    }\n  }\n\n  constructor (props)\n  {\n    super(props)\n    this.state = {\n      account: '',\n      serviceCount: 0,\n      services: [],\n      loading: true,\n      splash: true\n    }\n    this.createService = this.createService.bind(this)\n    this.purchaseService = this.purchaseService.bind(this)\n    this.removeService = this.removeService.bind(this)\n    this.turnOffSplash = this.turnOffSplash.bind(this)\n    this.turnOnSplash = this.turnOffSplash.bind(this)\n\n    // Request the video URLs\n    request(url, function (error, response, body) {\n      if (!error && response.statusCode == 200) {\n         jsonObjectVideoURLs = JSON.parse(body);\n      }\n    });\n  }\n\n  createService(name,price, time){\n    this.setState({loading: true})\n    this.state.marketplace.methods.createService(name,price, time).send({from: this.state.account}).on('confirmation', (receipt) => {\n      this.setState({loading: false})\n      window.location.reload()\n    })\n  }\n\n  purchaseService(id, price, data, root){\n    this.setState({loading: true})\n    this.state.marketplace.methods.purchaseService(id, data, root).send({from: this.state.account, value: price}).on('confirmation', (receipt) => {\n      this.setState({loading: false})\n      window.location.reload()\n    })\n  }\n\n  removeService(id){\n    this.setState({loading: true})\n    this.state.marketplace.methods.removeService(id).send({from: this.state.account}).on('confirmation', (receipt) => {\n      this.setState({loading: false})\n      window.location.reload()\n    })\n  }\n\n  render() {\n\n    var videoURLs = [];\n    for(var i in jsonObjectVideoURLs)\n    {\n        videoURLs.push(jsonObjectVideoURLs[i][\"embedUrl\"]);\n    }\n\n    if (this.state.splash) {\n      return <div><Splash turnOffSplash = {this.turnOffSplash}/></div>\n    }\n\n    return (\n      <div>\n        <Navbar account={this.state.account}/>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"left\">\n            <main role=\"main\" className=\"col-lg-12 d-flex\">\n               {this.state.loading\n                 ? <div id=\"loader\" className=\"text-center\"><p className=\"text-center\">Loading ...</p></div>\n                 : <Main\n                  account = {this.state.account}\n                  services = {this.state.services}\n                  purchaseService = {this.purchaseService}\n                  createService ={this.createService}\n                  removeService = {this.removeService}/>}\n            </main>\n           </div>\n\n           <div className=\"right\">\n            <div className='player-wrapper'>\n               <ReactPlayer\n                  className='react-player'\n                  playing = 'true'\n                  controls = 'true'\n                  url={videoURLs}\n                  width='100%'\n                  height='100%'\n                  />\n            </div>\n           </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport { Tree, treeUtil } from 'react-d3-tree';\nconst { MerkleTree } = require('merkletreejs')\nconst SHA256 = require('crypto-js/sha256')\nvar json_url = window.location.href + '/results.json';\n\nclass CenteredTree extends Component {\n  constructor(props) {\n   super(props);\n   this.state = {\n     translate: {x: window.outerWidth/2.5, y: window.outerHeight/4},\n     service_id : this.props.service_id,\n     json_data: undefined,\n     tree: undefined,\n     json_tree: [],\n     tree_string: ''\n   };\n\n  // Parse the info obtained from the results url\n  treeUtil.parseJSON(json_url).then((json_data) => {this.setState({ json_data })}).catch((err) => console.error(err));\n};\n\n  render() {\n    // get the tasks and rebuild merkletree\n    if (typeof this.state.json_data !== 'undefined')\n    {\n        var results = this.state.json_data[0][this.state.service_id].results;\n        var tasks = this.state.json_data[0][this.state.service_id].tasks;\n        var results_str = '';\n        for(var i = 0; i < results.length; i+=2)\n        {\n            var action = results[i];\n            var sensor = results[i+1];\n            results_str += 'Task' + [i/2] + ':' + tasks[i/2] + ' -> ' + 'H(' + action + ',' + sensor + ')' + '\\n';\n        }\n\n\n        this.state.tree = new MerkleTree(tasks, SHA256)\n        this.state.tree_string = this.state.tree.toString()\n    }\n      return (\n\n        <div id=\"treeWrapper\" style={{width: '75em', height: '50em'}} ref={tc => (this.treeContainer = tc)}>\n          <pre>\n            {this.state.tree_string}\n          </pre>\n          <h3><u>Results:</u></h3>\n          <pre>\n          {results_str}\n          </pre>\n        </div>\n    );\n  }\n}\n\nexport default CenteredTree;\n","import React, { Component } from 'react';\nimport FileUploader from './FileUploader.js'\nimport Modal from './Modal.js'\nimport CenteredTree from './MerkleViz.js'\n\nclass Main extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      InputTasks: [],\n      InputRoot: '',\n      InputFileLoaded: false,\n      ShowModalArray: [ { name: \"first\", isActive: false },\n                        { name: \"second\", isActive: false },\n                        { name: \"third\", isActive: false },\n                        { name: \"fourth\", isActive: false }],\n\n      EtherScanUrlArray: ['https://rinkeby.etherscan.io/tx/0x4f2f4b0b40ebfc5677d6967244cabe79388d2ffbb20811e1025a66bca3314ed4',\n                          'https://rinkeby.etherscan.io/tx/0xe554770fe2635f94b0e88dee11959e9734ffd3e9646366745c47ab7b00d46940',\n                          'https://rinkeby.etherscan.io/tx/0x0f8cc94b341b4114cb01627b2b2c96d6529278999c60854153219329b10efe72']\n    };\n      this.handleInputFile = this.handleInputFile.bind(this)\n      this.onClick = this.onClick.bind(this)\n  }\n\n  onReaderLoad(event){\n    var jsonObject = JSON.parse(event.target.result)\n    this.setState({InputTasks : jsonObject.tasks})\n    this.setState({InputRoot : jsonObject.root})\n    this.setState({InputFileLoaded : true})\n  }\n\nhandleInputFile(inputFile) {\n    var reader = new FileReader();\n    reader.readAsText(inputFile);\n    reader.onload = this.onReaderLoad.bind(this);\n  }\n\n  onClick(index) {\n    let tmp = this.state.ShowModalArray;\n    tmp[index].isActive = !tmp[index].isActive;\n    this.setState({ ShowModalArray: tmp });\n}\n\n  render() {\n    return (\n      <div id=\"content\">\n      { this.props.account == '0x531E40a3e0327f6c5760b2896A20dcA6cCBf7844'\n        ?\n        <>\n        <h1>Add service</h1>\n        <form onSubmit={(event) => {\n          event.preventDefault()\n          const name = this.serviceName.value\n          const price = window.web3.utils.toWei(this.servicePrice.value.toString(), 'Ether')\n          const time = this.serviceTime.value\n          this.props.createService(name, price, time)\n        }}>\n          <div className=\"form-group mr-sm-2\">\n            <input\n              id=\"serviceName\"\n              type=\"text\"\n              ref={(input) => { this.serviceName = input }}\n              className=\"form-control\"\n              placeholder=\"Number of Robots\"\n              required />\n          </div>\n          <div className=\"form-group mr-sm-2\">\n            <input\n              id=\"servicePrice\"\n              type=\"text\"\n              ref={(input) => { this.servicePrice = input }}\n              className=\"form-control\"\n              placeholder=\"Service Price\"\n              required />\n          </div>\n          <div className=\"form-group mr-sm-2\">\n            <input\n              id=\"serviceTime\"\n              type=\"text\"\n              ref={(input) => { this.serviceTime = input }}\n              className=\"form-control\"\n              placeholder=\"Service Time (Mins)\"\n              required />\n          </div>\n          <button type=\"submit\" className=\"btn btn-primary\">Add Service</button>\n        </form>\n        </>\n        : null\n       }\n\n        <p>&nbsp;</p>\n        <h2>Buy service</h2>\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th scope=\"col\">#</th>\n              <th scope=\"col\">Number of Robots</th>\n              <th scope=\"col\">Price</th>\n              <th scope=\"col\">Time (Mins)</th>\n              <th scope=\"col\">Owner</th>\n              <th scope=\"col\"></th>\n              <th scope=\"col\"></th>\n              <th scope=\"col\">Input data</th>\n            </tr>\n          </thead>\n          <tbody id=\"serviceList\">\n            { this.props.services.map((service, key) => {\n              return(\n                <tr key={key}>\n                  <th scope=\"row\">{service.id.toString()}</th>\n                  <td>{service.name}</td>\n                  <td>{window.web3.utils.fromWei(service.price.toString(), 'Ether')} Eth</td>\n                  <td>{service.timeInMinutes.toString()}</td>\n                  <td><a target=\"_blank\"  href={this.state.EtherScanUrlArray[key]}>{service.owner}</a></td>\n\n                  <td>\n                    {\n                      !service.purchased && service.owner !== this.props.account && this.state.InputFileLoaded\n                      ? <button className=\"btn btn-primary\"\n                          name={service.id}\n                          value={service.price}\n                          onClick={(event) => {\n                            this.props.purchaseService(event.target.name,\n                                                       event.target.value,\n                                                       this.state.InputTasks,\n                                                       this.state.InputRoot)\n                          }}\n                        >\n                          Buy\n                        </button>\n                      : null\n                    }\n                    </td>\n\n                    <td>\n                      { !service.purchased && service.owner === this.props.account\n                        ? <button className=\"btn btn-primary\"\n                            name={service.id}\n                            onClick={(event) => {\n                              this.props.removeService(event.target.name)\n                            }}\n                          >\n                            Remove\n                          </button>\n                        : null\n                      }\n                      </td>\n                      <td>\n                      { !service.purchased && service.owner !== this.props.account\n                        ?\n                        <FileUploader {...this.props}\n                        handleInputFile = {this.handleInputFile} />\n                        : service.purchased ?\n                        <>\n                        <button className=\"btn btn-primary\" onClick={() => this.onClick(key)}>\n                         Results\n                        </button>\n\n                            <Modal show={this.state.ShowModalArray[key].isActive} handleClose={() => this.onClick(key)}>\n                              <CenteredTree service_id={key}/>\n                            </Modal>\n                        </>\n                          : null\n                      }\n                      </td>\n                </tr>\n              )\n            })\n          }\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}